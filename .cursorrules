## 1. Understand and Respect the Existing Architecture

- **Project Structure:**  
  - Integrate new features within the current folder structure (e.g., code in the `src` directory and static assets in `public`).
  - Avoid unnecessary reorganization unless a clear benefit is identified.

- **T3 Stack Conventions:**  
  - Follow the architectural patterns of a Create T3 App project.
  - Use Next.js for pages and API routes, tRPC for type-safe API calls, and TypeScript throughout.

---

## 2. Code Quality and Style

- **TypeScript & Linters:**  
  - Write all new code in TypeScript.
  - Adhere to the ESLint rules defined in `.eslintrc.cjs` and formatting rules in `.prettierrc`/`prettier.config.js`.

- **Consistency:**  
  - Maintain the same naming conventions, coding styles, and file organization as in the existing codebase.
  - Ensure changes pass the project's linting and formatting pipelines.

---

## 3. Integrate with the Technology Stack

- **Next.js Practices:**  
  - Utilize Next.js file-based routing and component rendering.
  - Follow best practices for server-side rendering or static site generation as appropriate.

- **tRPC & API Design:**  
  - When adding new API endpoints, follow tRPC guidelines to ensure type safety and consistency.

- **Tailwind CSS:**  
  - New UI components should use Tailwind CSS classes.
  - Match the design patterns already established in the project.

---

## 4. Database and ORM Considerations

- **Data Access:**  
  - Use the existing ORM conventions (such as Drizzle ORM) as configured in `drizzle.config.ts`.
  - Ensure that any data persistence features integrate smoothly with the current database setup.

- **Migrations and Schema:**  
  - If new features require schema changes, write proper migration scripts and test them thoroughly.

---

## 5. Error Handling, Monitoring, and Logging

- **Sentry Integration:**  
  - Follow the configurations in `sentry.client.config.ts`, `sentry.edge.config.ts`, and `sentry.server.config.ts` to integrate error monitoring.

- **Robust Error Handling:**  
  - Implement comprehensive error handling in both client-side and server-side code.
  - Ensure clear logging to facilitate debugging.

---

## 6. Testing and Continuous Integration

- **Write Tests:**  
  - Include unit tests and integration tests for each new feature.
  - This helps maintain reliability and guard against regressions.

- **CI/CD Pipelines:**  
  - Ensure that new code passes all CI tests before merging.
  - Follow the project's existing pipeline configuration.

---

## 7. Documentation and Communication

- **Code Documentation:**  
  - Update inline comments and external documentation (like the README) to explain new functionality.
  - Clearly document any changes in API or component usage.

- **Commit Messages & PR Descriptions:**  
  - Use descriptive commit messages and pull request summaries that detail what the new feature does and why it was implemented.

---

## 8. Security Best Practices

- **Authentication and Authorization:**  
  - If the feature involves user data, integrate with NextAuth.js (if applicable) and follow best practices for authentication.

- **Input Validation:**  
  - Validate and sanitize all user inputs to prevent security vulnerabilities.

---

## 9. Performance and Scalability

- **Optimize Code:**  
  - Analyze the performance implications of new features.
  - Ensure that added functionality is optimized and does not degrade overall performance.

- **Scalability:**  
  - Write modular and decoupled code to facilitate future scaling or refactoring.

---

## 10. Incremental Development

- **Iterative Approach:**  
  - Develop features in small, manageable increments to simplify testing and integration.
